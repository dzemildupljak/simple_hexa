name: Deploy to AWS

on:
  push:
    branches: [main]

jobs:
  build:
    name: Deploy to ECR and pull it to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: eu-central-1
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1
      # - name: Build, tag, and push image to Amazon ECR
      #   env:
      #     ECR_REGISTRY: ${{ secrets.AWS_REGISTRY_URL}}
      #     ECR_REPOSITORY: simple_hexa_repo
      #     IMAGE_TAG: latest
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      # - name: Display Runner IP
      #   run: |
      #     echo "Runner IP Address: $RUNNER_IP"
      #   env:
      #     RUNNER_IP: ${{ runner.ip }}
      - name: Build & Deploy
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          ECR_REPOSITORY: simple_hexa_repo
          IMAGE_TAG: latest
          HOSTNAME: ${{secrets.EC2_HOST}}
          USER_NAME: ${{secrets.EC2_USERNAME}}

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY_URL}}
          '
        # aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}
      # - name: Test ssh connection
      #   run: |
      #     touch private_key.pem
      #     echo '${{ secrets.EC2_SSH_KEY }}' > private_key.pem
      #     chmod 400 private_key.pem
      #     ssh -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "ls -la"

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: eu-central-1

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Build, tag, and push image to Amazon ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: simple_hexa_repo
      #     IMAGE_TAG: latest
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Execute SSH commmands on remote server
      #   uses: JimCronqvist/action-ssh@master
      #   with:
      #     hosts: "${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}"
      #     privateKey: ${{ secrets.EC2_SSH_KEY }}
      #     debug: true
      #     command: |
      #       ls -lah
      #       hostname -a
      #       whoami
      #       touch helloworld.txt
      #       cat helloworld.txt
      # - name: Setting up SSH key
      #   uses: webfactory/ssh-agent@v0.5.1
      #   with:
      #     ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # - name: Get Runner IP
      #   id: runner-ip
      #   run: |
      #     RUNNER_IP=${{ secrets.EC2_HOST }}
      #     echo "Runner IP is $RUNNER_IP"
      #     echo "::set-output name=ip::$RUNNER_IP"
      # - name: Get GitHub Actions IP
      #   id: get_ip
      #   run: echo "::set-output name=ip::$(curl -s https://api.github.com/meta | jq -r '.actions[0]')"

      # - name: Update Security Group
      #   run: |
      #     aws ec2 authorize-security-group-ingress --group-id ${{ secrets.YOUR_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr "${{ steps.runner-ip.outputs.ip }}/32"

      # - name: SSH into EC2 and deploy
      #   env:
      #     ECR_REGISTRY: ${{ secrets.AWS_REGISTRY_URL}}
      #     ECR_REPOSITORY: simple_hexa_repo
      #     IMAGE_TAG: latest
      #     EC2_HOST: ${{ secrets.EC2_HOST }}
      #     EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      #   run: |
      #     ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $ECR_REGISTRY"
      #     ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      #     ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "docker ps -q --filter ancestor=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG | xargs -r docker stop"
      #     ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "docker run -p 80:8080 -d $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # - name: Remove Security Group Rule
      #   if: always()
      #   run: |
      #     aws ec2 revoke-security-group-ingress --group-id ${{ secrets.YOUR_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr "${{ steps.runner-ip.outputs.ip }}/32"

# name: EC2 Docker Operations

# on: [push] # or any other event

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:

# name: Checkout repository
#     uses: actions/checkout@v2

# name: Setting up SSH key
#     uses: webfactory/ssh-agent@v0.5.1
#     with:
#       ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

# name: Stop Docker container on EC2
#     run: |
#       ssh -o "StrictHostKeyChecking=no" ec2-user@EC2_PUBLIC_IP "docker stop [container_name]"

# name: Docker ECR and EC2 Deployment

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     env:
#       DOCKER_CONFIG: /home/runner/.docker
#       DOCKER_CLI_EXPERIMENTAL: enabled

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Docker
#         uses: docker-practice/actions-setup-docker@master
#         # uses: actions/setup-docker@v2

#       - name: Build Docker image
#         run: |
#           docker build -t my-golang-app .
#           docker tag my-golang-app:latest ${{ secrets.AWS_REGISTRY_URL }}/my-golang-app:latest

#       # - name: Log in to AWS ECR
#       #   run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY_URL }}
#       - name: Login to ECR
#         id: ecr
#         uses: jwalton/gh-ecr-login@v1
#         with:
#           access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           region: eu-central-1
#       - name: Push Docker image to ECR
#         run: docker push ${{ secrets.AWS_REGISTRY_URL }}/my-golang-app:latest

#       # - name: SSH into EC2 and deploy
#       #   run: |
#       #     scp -i ${{ secrets.EC2_SSH_KEY }} -o StrictHostKeyChecking=no -r . ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/path/to/app
#       #     ssh -i ${{ secrets.EC2_SSH_KEY }} -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "docker ps -q --filter ancestor=${{ secrets.AWS_REGISTRY_URL }}/my-golang-app:latest | xargs -r docker stop"
#       #     ssh -i ${{ secrets.EC2_SSH_KEY }} -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "docker run -p 80:8080 -d ${{ secrets.AWS_REGISTRY_URL }}/my-golang-app:latest"
