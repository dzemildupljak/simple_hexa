name: Deploy to AWS

on:
  push:
    branches: [main]

jobs:
  build:
    name: Deploy to ECR and pull it to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Build, tag, and push image to Amazon ECR
      #   env:
      #     ECR_REGISTRY: ${{ secrets.AWS_REGISTRY_URL}}
      #     ECR_REPOSITORY: simple_hexa_repo
      #     IMAGE_TAG: latest
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Build & Deploy
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          ECR_REPOSITORY: simple_hexa_repo
          IMAGE_TAG: latest
          HOSTNAME: ${{secrets.EC2_HOST}}
          USER_NAME: ${{secrets.EC2_USERNAME}}

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} 'aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY_URL}}'
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} 'docker pull ${{ secrets.AWS_REGISTRY_URL}}/simple_hexa_repo:latest'
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} 'docker ps -q --filter ancestor=${{ secrets.AWS_REGISTRY_URL}}/simple_hexa_repo:latest | xargs -r docker stop'
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} 'docker run -p 80:8080 -d ${{ secrets.AWS_REGISTRY_URL}}/simple_hexa_repo:latest'
